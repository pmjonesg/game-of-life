{"version":3,"sources":["Grid.js","Controls.js","InfoBox.js","useControls.js","useGeneration.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","alive","onClick","style","border","background","width","height","Grid","generation","handleEdit","map","row","rowIndex","display","direction","cellState","columnIndex","Controls","paused","handlePlay","handlePause","handlePrevious","handleNext","hasPrevious","flexDirection","flexWrap","padding","disabled","fontSize","color","InfoBox","generationCount","boxShadow","textAlign","useControls","incrementGeneration","decrementGeneration","useState","setPaused","getNeighbours","x","y","undefined","isAlive","currentState","neighbours","liveNeighbourCount","reduce","count","cell","Boolean","generateGeneration","dimensions","X","Y","newGeneration","JSON","parse","stringify","length","Math","random","generationHistory","useGeneration","initialGeneration","setGeneration","action","setAction","useEffect","copy","push","previousGeneration","pop","updateGeneration","App","interval","setInterval","clearInterval","position","top","right","value","bottom","left","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAAA,SAASA,EAAT,GAAmC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACrB,OAAO,qBAAKA,QAASA,EAASC,MAAO,CACnCC,OAAQ,iBACRC,WAAYJ,EAAQ,QAAU,QAC9BK,MAAO,OACPC,OAAQ,UAkBGC,MAdf,YAA2C,IAA3BC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC1B,OAAOD,EAAWE,KAAI,SAACC,EAAKC,GAAN,OACpB,qBAAoBV,MAAO,CAAEW,QAAS,OAAQC,UAAW,UAAzD,SACGH,EAAID,KAAI,SAACK,EAAWC,GAAZ,OACP,cAACjB,EAAD,CAEEC,MAAOe,EACPd,QAAS,kBAAMQ,EAAWG,EAAUI,GAAcD,KAHpD,UACUH,EADV,YACsBI,QAHhBJ,O,oEC4BCK,MAlCf,YAAiG,IAA7EC,EAA4E,EAA5EA,OAAQC,EAAoE,EAApEA,WAAYC,EAAwD,EAAxDA,YAAaC,EAA2C,EAA3CA,eAAgBC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,YAC/E,OACE,sBAAKrB,MAAO,CACVW,QAAS,OACTW,cAAe,MACfC,SAAU,SACVC,QAAS,OACTtB,WAAY,SALd,UAOE,cAAC,IAAD,CACEuB,UAAWJ,EACXtB,QAASoB,EACTO,SAAS,QACTC,MAAON,EAAc,SAAW,aAElC,cAAC,IAAD,CACEtB,QAASkB,EACTU,MAAQX,EAAqB,SAAZ,UACjBU,SAAS,UAEX,cAAC,IAAD,CACE3B,QAASmB,EACTS,MAAOX,EAAS,UAAY,SAC5BU,SAAS,UAEX,cAAC,IAAD,CACE3B,QAASiB,EAASI,EAAa,kBAAM,MACrCM,SAAS,QACTC,MAAOX,EAAS,SAAW,iBClBpBY,MAff,YAA+C,IAA5BZ,EAA2B,EAA3BA,OAAQa,EAAmB,EAAnBA,gBACzB,OACE,sBAAK7B,MAAO,CACVwB,QAAS,OACTtB,WAAY,QACZD,OAAQ,kBACR6B,UAAW,oBACXC,UAAW,UALb,UAOE,6BAAKf,EAAS,SAAW,YACzB,8CAAiBa,S,OCWRG,MAnBf,YAAoE,IAA7CC,EAA4C,EAA5CA,oBAAqBC,EAAuB,EAAvBA,oBAAuB,EACrCC,oBAAS,GAD4B,mBAWjE,MAAO,CACLnB,OAZ+D,KAa/DoB,UAb+D,KAc/DhB,WAXF,WACEa,KAWAd,eARF,WACEe,OCRG,SAASG,EAAcC,EAAGC,EAAGjC,GAUlC,MAAO,CATSA,EAAWgC,EAAI,GAAKhC,EAAWgC,EAAI,GAAGC,EAAI,QAAKC,EAC7ClC,EAAWgC,GAAKhC,EAAWgC,GAAGC,EAAI,QAAKC,EACxClC,EAAWgC,EAAI,GAAKhC,EAAWgC,EAAI,GAAGC,EAAI,QAAKC,EACnDlC,EAAWgC,EAAI,GAAKhC,EAAWgC,EAAI,GAAGC,QAAKC,EAC1ClC,EAAWgC,EAAI,GAAKhC,EAAWgC,EAAI,GAAGC,QAAKC,EACtClC,EAAWgC,EAAI,GAAKhC,EAAWgC,EAAI,GAAGC,EAAI,QAAKC,EAC7ClC,EAAWgC,GAAKhC,EAAWgC,GAAGC,EAAI,QAAKC,EACxClC,EAAWgC,EAAI,GAAKhC,EAAWgC,EAAI,GAAGC,EAAI,QAAKC,GAc9D,SAASC,EAAQC,EAAcC,GACpC,IAAMC,EAAqBD,EAAWE,QAAO,SAACC,EAAOC,GAAR,OAAiBD,EAASE,QAAQD,KAAO,GAEtF,QAAIH,EAAqB,OACrBA,EAAqB,MACJ,IAAjBF,GAAiD,IAAvBE,GAEvBF,IAWT,SAASO,EAAmBC,GAA8B,IAAlB5C,EAAiB,uDAAJ,GAAI,cACxC4C,EADwC,GAChDC,EADgD,KAC7CC,EAD6C,KAEjDC,EAAgBC,KAAKC,MAAMD,KAAKE,UAAUlD,IAGhD,IAAKA,EAAWmD,OAAQ,CACtB,IAAK,IAAInB,EAAI,EAAGA,EAAIa,EAAGb,IAAK,CACrBe,EAAcf,KAAIe,EAAcf,GAAK,IAC1C,IAAK,IAAIC,EAAI,EAAGA,EAAIa,EAAGb,IACrBc,EAAcf,GAAGC,GAAKmB,KAAKC,SAAW,IAO1C,OAFAN,EAAc,GAAG,IAAK,EAEfA,EAGT,IAAK,IAAIf,EAAI,EAAGA,EAAIa,EAAGb,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIa,EAAGb,IACrBc,EAAcf,GAAGC,GAAKE,EAAQY,EAAcf,GAAGC,GAAIF,EAAcC,EAAGC,EAAGjC,IAI3E,OAAO+C,EAGT,IACMO,EAAoB,GAyCXC,MAvCf,YAAwC,IAAfX,EAAc,EAAdA,WAAc,EACDf,mBAJZ,SAAAe,GAAU,OAAKD,EAAmBC,GAIbY,CAAkBZ,IAD1B,mBAC9B5C,EAD8B,KAClByD,EADkB,OAET5B,mBAAS,IAFA,mBAE9B6B,EAF8B,KAEtBC,EAFsB,KA8BrC,OA1BAC,qBAAU,WACR,GAAe,cAAXF,EAAwB,CAC1B,IAAMG,EAAOb,KAAKC,MAAMD,KAAKE,UAAUlD,IACvCsD,EAAkBQ,KAAKD,MAExB,CAAC7D,EAAY0D,IAqBT,CACL1D,aACAwC,MAAOc,EAAkBH,OACzBxB,oBAtBF,WACE8B,GAAc,SAAAzD,GAAU,OAAI2C,EAAmBC,EAAY5C,MAC3D2D,EAAU,cAqBV/B,oBAlBF,WACE,IAAMmC,EAAqBT,EAAkBU,MACxCD,IAELN,EAAcM,GACdJ,EAAU,eAcVM,iBATF,SAA0BjE,GACxByD,EAAcT,KAAKC,MAAMD,KAAKE,UAAUlD,QC5FtC4C,EAAa,CAAC,GAAI,KAqDTsB,MAnDf,WAAgB,IAAD,EAOTX,EAAc,CAAEX,eALlB5C,EAFW,EAEXA,WACAwC,EAHW,EAGXA,MACAb,EAJW,EAIXA,oBACAC,EALW,EAKXA,oBACAqC,EANW,EAMXA,iBANW,EAcTvC,EAAY,CAAEC,sBAAqBC,wBAJrClB,EAVW,EAUXA,OACAoB,EAXW,EAWXA,UACAhB,EAZW,EAYXA,WACAD,EAbW,EAaXA,eAkBF,OAVA+C,qBAAU,WACR,IAAIlD,EAAJ,CAEA,IAAMyD,EAAWC,aAAY,WAC3BzC,MACC,IAAK,IAER,OAAO,kBAAM0C,cAAcF,OAC1B,CAACxC,EAAqBjB,IAGvB,qCACE,qBAAKhB,MAAO,CAAE4E,SAAU,WAAYC,IAAK,GAAIC,MAAO,IAApD,SACE,cAAC,EAAD,CAAS9D,OAAQA,EAAQa,gBAAiBiB,MAE5C,cAAC,EAAD,CAAMI,WAAYA,EAAY5C,WAAYA,EAAYC,WApB1D,SAAoB+B,EAAGC,EAAGwC,GACxBzE,EAAWgC,GAAGC,GAAKwC,EACnBR,EAAiBjE,MAmBf,qBAAKN,MAAO,CAAE4E,SAAU,WAAYI,OAAQ,EAAGC,KAAM,qBAArD,SACE,cAAC,EAAD,CACEjE,OAAQA,EACRC,WAAY,kBAAMmB,GAAU,IAC5BlB,YAAa,kBAAMkB,GAAU,IAC7BjB,eAAgBA,EAChBC,WAAYA,EACZC,cAAeyB,UC1CVoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4eca146d.chunk.js","sourcesContent":["function Cell({ alive, onClick }) {\n  return <div onClick={onClick} style={{\n    border: '1px solid grey',\n    background: alive ? 'black' : 'white',\n    width: '15px',\n    height: '15px'\n  }} />\n}\n\nfunction Grid({ generation, handleEdit }) {\n  return generation.map((row, rowIndex) => (\n    <div key={rowIndex} style={{ display: 'flex', direction: 'column' }}>\n      {row.map((cellState, columnIndex) => (\n        <Cell\n          key={`${rowIndex}-${columnIndex}`}\n          alive={cellState}\n          onClick={() => handleEdit(rowIndex, columnIndex, !cellState)}\n        />\n      ))}\n    </div>\n  ))\n}\n\nexport default Grid\n","import SkipPreviousIcon from '@material-ui/icons/SkipPrevious'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport PauseIcon from '@material-ui/icons/Pause'\nimport SkipNextIcon from '@material-ui/icons/SkipNext'\n\nfunction Controls({ paused, handlePlay, handlePause, handlePrevious, handleNext, hasPrevious }) {\n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'nowrap',\n      padding: '10px',\n      background: 'white'\n    }}>\n      <SkipPreviousIcon\n        disabled={!hasPrevious}\n        onClick={handlePrevious}\n        fontSize=\"large\"\n        color={hasPrevious ? 'action' : 'disabled'}\n      />\n      <PlayArrowIcon\n        onClick={handlePlay}\n        color={!paused ? 'primary' : 'action'}\n        fontSize=\"large\"\n      />\n      <PauseIcon\n        onClick={handlePause}\n        color={paused ? 'primary' : 'action'}\n        fontSize=\"large\"\n      />\n      <SkipNextIcon\n        onClick={paused ? handleNext : () => null}\n        fontSize=\"large\"\n        color={paused ? 'action' : 'disabled'}\n      />\n    </div>\n  )\n}\n\nexport default Controls\n","function InfoBox({ paused, generationCount }) {\n  return (\n    <div style={{\n      padding: '10px',\n      background: 'white',\n      border: '1px solid black',\n      boxShadow: '5px 5px 8px black',\n      textAlign: 'center'\n    }}>\n      <h4>{paused ? 'Paused' : 'Running'}</h4>\n      <h4>Generation: {generationCount}</h4>\n    </div>\n  )\n}\n\nexport default InfoBox\n","import { useState } from 'react'\n\nfunction useControls({ incrementGeneration, decrementGeneration }) {\n  const [paused, setPaused] = useState(false)\n\n  function handleNext() {\n    incrementGeneration()\n  }\n\n  function handlePrevious() {\n    decrementGeneration()\n  }\n\n  return {\n    paused,\n    setPaused,\n    handleNext,\n    handlePrevious\n  }\n}\n\nexport default useControls\n","import { useState, useEffect } from 'react'\n\nexport function getNeighbours(x, y, generation) {\n  const topLeft = generation[x - 1] ? generation[x - 1][y - 1] : undefined\n  const topMiddle = generation[x] ? generation[x][y - 1] : undefined\n  const topRight = generation[x + 1] ? generation[x + 1][y - 1] : undefined\n  const left = generation[x - 1] ? generation[x - 1][y] : undefined\n  const right = generation[x + 1] ? generation[x + 1][y] : undefined\n  const bottomLeft = generation[x - 1] ? generation[x - 1][y + 1] : undefined\n  const bottomMiddle = generation[x] ? generation[x][y + 1] : undefined\n  const bottomRight = generation[x + 1] ? generation[x + 1][y + 1] : undefined\n\n  return [\n    topLeft,\n    topMiddle,\n    topRight,\n    left,\n    right,\n    bottomLeft,\n    bottomMiddle,\n    bottomRight\n  ]\n}\n\nexport function isAlive(currentState, neighbours) {\n  const liveNeighbourCount = neighbours.reduce((count, cell) => count += Boolean(cell), 0) \n\n  if (liveNeighbourCount < 2) return false // underpopulation\n  if (liveNeighbourCount > 3) return false // overpopulation\n  if (currentState === false && liveNeighbourCount === 3) return true // reproduction\n\n  return currentState\n}\n\n// A generation of cells is a matrix of the provided dimensions\n// this function will create a new generation based on the previous one\n// according to the rules of life:\n//   1. Any live cell with fewer than 2 live neighbours dies, as if by underpopulation\n//   2. Any live cell with 2 or 3 live neighbours lives on to the next generation\n//   3. Any live cell with more than 3 live neighbours dies, as if by overpopulation\n//   4. Any dead cell with exactly 3 live neighbours becomes a live cell, as if by reproduction\n// the return value will be the new generation\nfunction generateGeneration(dimensions, generation = []) {\n  const [X, Y] = dimensions\n  const newGeneration = JSON.parse(JSON.stringify(generation))\n\n  // If this is the first generation (an empty one), generate randomly\n  if (!generation.length) {\n    for (let x = 0; x < X; x++) {\n      if (!newGeneration[x]) newGeneration[x] = []\n      for (let y = 0; y < Y; y++) {\n        newGeneration[x][y] = Math.random() > 0.92 // this will generate 10% live cells\n      }\n    }\n\n    // REMOVE: test purposes\n    newGeneration[0][0] = true\n\n    return newGeneration\n  }\n\n  for (let x = 0; x < X; x++) {\n    for (let y = 0; y < Y; y++) {\n      newGeneration[x][y] = isAlive(newGeneration[x][y], getNeighbours(x, y, generation))\n    }\n  }\n\n  return newGeneration\n}\n\nconst initialGeneration = dimensions =>  generateGeneration(dimensions)\nconst generationHistory = []\n\nfunction useGeneration({ dimensions }) {\n  const [generation, setGeneration] = useState(initialGeneration(dimensions))\n  const [action, setAction] = useState('')\n\n  useEffect(() => {\n    if (action === 'increment') {\n      const copy = JSON.parse(JSON.stringify(generation))\n      generationHistory.push(copy)\n    }\n  }, [generation, action])\n\n  function incrementGeneration() {\n    setGeneration(generation => generateGeneration(dimensions, generation))\n    setAction('increment')\n  }\n\n  function decrementGeneration() {\n    const previousGeneration = generationHistory.pop()\n    if (!previousGeneration) return\n\n    setGeneration(previousGeneration)\n    setAction('decrement')\n  }\n\n  // This function refreshes the reference to the generation obj to trigger a rerender\n  // on mutations\n  function updateGeneration(generation) {\n    setGeneration(JSON.parse(JSON.stringify(generation)))\n  }\n\n  return {\n    generation,\n    count: generationHistory.length,\n    incrementGeneration,\n    decrementGeneration,\n    updateGeneration\n  }\n}\n\nexport default useGeneration\n","import { useEffect } from \"react\";\n\nimport Grid from \"./Grid\";\nimport Controls from \"./Controls\";\nimport InfoBox from \"./InfoBox\";\nimport useControls from \"./useControls\";\nimport useGeneration from \"./useGeneration\";\n\nconst dimensions = [50, 120] // x, y\n\nfunction App() {\n  const {\n    generation,\n    count,\n    incrementGeneration,\n    decrementGeneration,\n    updateGeneration\n  } = useGeneration({ dimensions })\n\n  const {\n    paused,\n    setPaused,\n    handleNext,\n    handlePrevious\n  } = useControls({ incrementGeneration, decrementGeneration })\n\n  function handleEdit(x, y, value) {\n    generation[x][y] = value\n    updateGeneration(generation)\n  }\n\n  useEffect(() => {\n    if (paused) return\n\n    const interval = setInterval(() => {\n      incrementGeneration()\n    }, 1000/60) //denominator is the fps\n\n    return () => clearInterval(interval)\n  }, [incrementGeneration, paused])\n\n  return (\n    <>\n      <div style={{ position: 'absolute', top: 10, right: 10 }}>\n        <InfoBox paused={paused} generationCount={count} />\n      </div>\n      <Grid dimensions={dimensions} generation={generation} handleEdit={handleEdit} />\n      <div style={{ position: 'absolute', bottom: 0, left: 'calc(50% - 100px)' }}>\n        <Controls\n          paused={paused}\n          handlePlay={() => setPaused(false)}\n          handlePause={() => setPaused(true)}\n          handlePrevious={handlePrevious}\n          handleNext={handleNext}\n          hasPrevious={!!count}\n        />\n      </div>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}